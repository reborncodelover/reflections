What happens when you initialize a repository? Why do you need to do it?
Answer: Allows you to start version tracking your files in the directory and its subdirectories.
	When you run init, it creates .git folder in the directory where you ran the init command from.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
Answer: Staging Area is the holding area before doing commit. When you have completed working on a file
	you add it to the staging area using 'git add <file_name>'. Now that file will be automatically included
	in the next commit. Working directory might have untracked files that are yet to be staged.

How can you use the staging area to make sure you have one commit per logical
change?
Answer: The logical change may involve one or more files.
	You add (using git add command) the selected files needed for the logical change. 
	Now when you commit, all the changed files are commited to the repository even though
	you may have more files changed in your working directory

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
Answer: Branches might be useful when you want to do some experimental workk without impacting master
	Also, it may be handy you want to emergency fixes and releases for the release in  production.

How do the diagrams help you visualize the branch structure?
Answer: The diagram helps understand which branches have which commits and also to identify the parent commit
	for each of the child commits


What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
Answer: After merging 'coins' branch to master branch, the master branch now has all the changes from coins 
	branch as well as the changes made to master branch after coins branch was created. Now master branch
	moves to the new merged commit. The graph will now show for the tip of the master branch, the parents
	will point to both coins branch tip as well as the commit on master prior to merge.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
